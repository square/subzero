syntax = "proto2";

option java_package = "com.squareup.protos.subzero.service";
option java_multiple_files = true;

import "squareup/subzero/common.proto";

/**
 * Proto used to communicate between the Java CLI and the CodeSafe code.
 *
 * This file must be kept in sync with the proto definition at:
 * https://github.com/square/subzero/blob/master/java/proto/src/main/proto/squareup/subzero/internal.proto
 */

message InternalCommandRequest {
  message InitWalletRequest {
    // At master_seed creation time, we mix entropy from the Subzero host machine and the nCipher.
    required bytes random_bytes = 1;
  }

  message FinalizeWalletRequest {
    required EncryptedMasterSeed encrypted_master_seed = 1;
    repeated EncryptedPubKey encrypted_pub_keys = 2;
  }

  message SignTxRequest {
    required EncryptedMasterSeed encrypted_master_seed = 1;
    repeated EncryptedPubKey encrypted_pub_keys = 2;
    //TODO: deprecate these fields and take from CommandRequest instead.
    repeated TxInput inputs = 3;
    repeated TxOutput outputs = 4;
    required uint32 lock_time = 5;

  }
 
  required uint32 version = 1;
  required uint32 wallet_id = 2;
  // nCipher tickets allow loading a key outside CodeSafe but then actually use the key inside
  // CodeSafe. The length is not documented by Thales.
  optional bytes master_seed_encryption_key_ticket = 3;
  optional bytes pub_key_encryption_key_ticket = 4;

  oneof command {
    InitWalletRequest InitWallet = 5;
    FinalizeWalletRequest FinalizeWallet = 6;
    SignTxRequest SignTx = 7;
  }
  optional bytes serialized_command_request = 8;
  optional QrCodeSignature qrsignature = 9;
}



enum Result {
  SUCCESS = 0;
  VERSION_MISMATCH = 1;
  reserved 2; // deprecated SELF_CHECK_FAILED
  COMMAND_DECODE_FAILED = 3;
  COMMAND_ENCODE_FAILED = 4;
  UNKNOWN_COMMAND = 5;
  FEE_VALIDATION_FAILED = 6;
  MISSING_ARGUMENTS = 7;
  NO_MASTER_SEED_ENCRYPTION_KEY_TICKET_FAILURE = 8;
  NO_PUB_KEY_ENCRYPTION_KEY_TICKET_FAILURE = 9;
  INCORRECT_RANDOM_BYTES_SIZE = 10;

  AES_GCM_ENCRYPT_BUFFER_TOO_SMALL_FAILURE = 11;
  AES_GCM_ENCRYPT_PLAINTEXT_TOO_LONG_FAILURE = 12;
  AES_GCM_ENCRYPT_UNEXPECTED_CIPHERTEXT_LEN_FAILURE = 13;
  AES_GCM_ENCRYPT_UNEXPECTED_IV_LEN_FAILURE = 14;

  AES_GCM_DECRYPT_BUFFER_TOO_SMALL_FAILURE = 15;
  AES_GCM_DECRYPT_CIPHERTEXT_TOO_LONG_FAILURE = 16;
  AES_GCM_DECRYPT_UNEXPECTED_PLAINTEXT_LEN_FAILURE = 17;

  GEN_RANDOM_BUFFER_TOO_LARGE_FAILURE = 18;
  GEN_RANDOM_UNEXPECTED_LEN_FAILURE = 19;

  EXPOSE_PUBKEY_NO_ENCRYPTED_PUBKEY_FAILURE = 20;
  EXPOSE_PUBKEY_UNEXPECTED_ENCRYPTED_PUBKEY_SIZE_FAILURE = 21;
  EXPOSE_PUBKEY_NO_PUBKEY_ENCRYPTION_KEY_FAILURE = 22;

  EXPOSE_WALLET_UNEXPECTED_ENCRYPTED_MASTER_SEED_SIZE_FAILURE = 23;
  EXPOSE_WALLET_NO_MASTER_SEED_ENCRYPTION_KEY_FAILURE = 24;
  EXPOSE_WALLET_UNEXPECTED_MASTER_SEED_LEN_FAILURE = 25;

  PROTECT_PUBKEY_NO_PUBKEY_ENCRYPTION_KEY_FAILURE = 26;

  PROTECT_WALLET_NO_MASTER_SEED_ENCRYPTION_KEY_FAILURE = 27;

  DERIVE_PUBKEY_DESERIALIZE_FAILURE = 45;
  reserved 28; // deprecated DERIVE_PUBKEY_NO_ACCOUNT_FAILURE
  DERIVE_PUBKEY_NO_IS_CHANGE_FAILURE = 29;
  DERIVE_PUBKEY_NO_INDEX_FAILURE = 30;
  DERIVE_PUBKEY_ACCOUNT_FAILURE = 31;
  DERIVE_PUBKEY_IS_CHANGE_FAILURE = 32;
  DERIVE_PUBKEY_INDEX_FAILURE = 33;

  COMPUTE_OUTPUT_HASH_INVALID_DESTINATION_OR_PATH_FAILURE = 34;

  DERIVE_PRIVATE_KEY_HDNODE_FROM_SEED_FAILURE = 35;
  DERIVE_PRIVATE_KEY_NO_ACCOUNT_FAILURE = 36;
  DERIVE_PRIVATE_KEY_NO_IS_CHANGE_FAILURE = 37;
  DERIVE_PRIVATE_KEY_NO_INDEX_FAILURE = 38;
  DERIVE_PRIVATE_KEY_COIN_TYPE_FAILURE = 39;
  DERIVE_PRIVATE_KEY_ACCOUNT_FAILURE = 40;
  DERIVE_PRIVATE_KEY_IS_CHANGE_FAILURE = 41;
  DERIVE_PRIVATE_KEY_INDEX_FAILURE = 42;

  SCRIPT_PUSH_OVERFLOW_FAILURE = 43;
  SCRIPT_PUSH_UNIMPLEMENTED = 44;

  GET_MODULE_CERTIFICATE_NO_SIGNERS = 46;
  GET_MODULE_CERTIFICATE_TOO_MANY_SIGNERS = 47;

  NO_ROLLBACK_FILE_NOT_FOUND = 48;
  NO_ROLLBACK_INVALID_FORMAT = 49;
  NO_ROLLBACK_INVALID_MAGIC = 50;
  NO_ROLLBACK_INVALID_VERSION = 51;
  QRSIG_CHECK_FAILED = 52;
  REQUIRED_FIELDS_NOT_PRESENT = 53;
  COMMAND_SHOULD_BE_SIGNTX = 54;
  SERIALIZED_BYTES_SHOULD_BE_PRESENT = 55;

  // any other error messages, such as INSERT_OCS, incorrect passphrase, etc.
  // 5xx represents failures which user input shouldn't be able to trigger
  UNKNOWN_INTERNAL_FAILURE = 500;
  NFAST_APP_TRANSACT_FAILURE = 501;
  NFAST_APP_TRANSACT_STATUS_FAILURE = 502;
  TICKET_LEN_OVERFLOW_FAILURE = 503;
}

message InternalCommandResponse {
  message InitWalletResponse {
    required EncryptedMasterSeed encrypted_master_seed = 1;
    required EncryptedPubKey encrypted_pub_key = 2;
  }

  message FinalizeWalletResponse {
    required bytes pub_key = 1;
    // The HSM returns a hash of all the pub keys. This allows the coordinator service to validate
    // that the pub_key being returned in this response has not been tampered with.
    required bytes pub_keys_hash = 2;
  }

  message SignTxResponse {
    // Each input gets a signature, so there should be the same number and order as the inputs in the SignTxRequest
    repeated Signature signatures = 1;
  }

  message ErrorResponse {
    required Result code = 1;
    optional string message = 2;
  }

  oneof response {
    InitWalletResponse InitWallet = 1;
    FinalizeWalletResponse FinalizeWallet = 2;
    SignTxResponse SignTx = 3;
    ErrorResponse Error = 4;
  }
}
